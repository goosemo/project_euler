
;Each new term in the Fibonacci sequence is generated by adding the previous
;two terms. By starting with 1 and 2, the first 10 terms will be:
;
;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;
;Find the sum of all the even-valued terms in the sequence which do not exceed
;four million.



(defun fib(num)
  (if (> num 1)    
    (+ (fib (- num 1)) (fib (- num 2)))
    1))
(progn ;sanity check
  (assert (eq 1  (fib  1)))
  (assert (eq 2  (fib  2)))
  (assert (eq 3  (fib  3)))
  (assert (eq 5  (fib  4)))
  (assert (eq 8  (fib  5)))
  (assert (eq 13 (fib  6)))
  (assert (eq 21 (fib  7)))
  (assert (eq 34 (fib  8)))
  (assert (eq 55 (fib  9)))
  (assert (eq 89 (fib 10)))
  )

(defun fibs(number_of_terms)
  (if (> number_of_terms 0)
    (cons (fib number_of_terms) (fibs (1- number_of_terms)))
    ))

(assert (list 1 2 3 5 8 13 21 34 55 89) (reverse (fibs 10)))

(defun fibsl-core(numbers limit)
  (if (< (+ (car numbers) (cadr numbers)) limit)
    (fibsl-core (cons (+ (car numbers) (cadr numbers)) numbers) limit)
    numbers
    ))

(defun fibsl(limit)
  (fibsl-core (list 2 1) limit))

(assert (equal (list 3524578 2178309 1346269 832040 514229 317811 196418 121393 75025 46368 28657 17711 10946 6765 4181 2584 1597 987 610 377 233 144 89 55 34 21 13 8 5 3 2 1) (fibsl 4000000)))

(defun solver(numbers sum)
  (cond 
    ((not (null numbers))
     (if (evenp (car numbers))
       (solver (cdr numbers) (+ sum (car numbers))))
       (solver (cdr numbers) sum)))
    (t sum)
  ))

(print (fibsl 90))
(assert (eq 44 (solver (fibsl 90) 0)))

(defun solve(num)
  (solver (fibsl num) 0))

(print (solve 4000000))
(assert (eq 4613732 (solve 4000000)))


