
;Each new term in the Fibonacci sequence is generated by adding the previous
;two terms. By starting with 1 and 2, the first 10 terms will be:
;
;1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;
;Find the sum of all the even-valued terms in the sequence which do not exceed
;four million.


(defun fib(num)
  (if (> num 1)    
    (+ (fib (- num 1)) (fib (- num 2)))
    1))
(progn ;sanity check
  (assert (eq 1  (fib  1)))
  (assert (eq 2  (fib  2)))
  (assert (eq 3  (fib  3)))
  (assert (eq 5  (fib  4)))
  (assert (eq 8  (fib  5)))
  (assert (eq 13 (fib  6)))
  (assert (eq 21 (fib  7)))
  (assert (eq 34 (fib  8)))
  (assert (eq 55 (fib  9)))
  (assert (eq 89 (fib 10)))
  )

(defun fibs(number_of_terms)
  (if (> number_of_terms 0)
    (cons (fib number_of_terms) (fibs (- number_of_terms 1)))
    ))

(assert (list 1 2 3 5 8 13 21 34 55 89) (reverse (fibs 10)))
(print (reverse (fibs 10)))

(defun solver(limit sum runner)
  (if (< (fib runner) limit)
    (if (evenp (fib runner))
      (solver limit (+ sum (fib runner)) (+ runner 1))
      (solver limit sum (+ runner 1)))
    sum
    ))

(assert (eq 44 (solver 90 0 1)))

(defun solve(num)
  (solver num 0 1))

(print (solve 4000000))



